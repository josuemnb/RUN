#pragma once

class array_VALUE
{
  public:
    VALUE *values;
    int size;
    int cap;

    array_VALUE(int capacity)
    {
        values = (VALUE *)malloc(sizeof(VALUE) * capacity);
        size = 0;
        cap = capacity;
    }

    void method_add(VALUE value)
    {
        if (size + 1 >= cap)
        {
            throw -1;
        }
        VALUE v(value);
        values[size] = v;
        size++;
    }

    VALUE method_get(int idx) {
        return values[idx];
    }

    bool method_has(VALUE value) {
        for(int i=0;i<size;i++) {
            if(values[i]==value) {
                return true;
            }
        }
        return false;
    }

    number method_size() {
        return size;
    }

    void method_set(int idx, VALUE value) {
        if(idx>=size) {
            exit(-1);
        }
        VALUE v(value);
        values[idx] = v;
    }

    void method_clear() {
        free(values);
        values = (VALUE *)malloc(sizeof(VALUE) * 16);
        size = 0;
        cap = capacity;
    }

    VALUE operator[](int i) const {
        if(i>=size) {
            exit(-1);
        }
        return values[i];
    }

    VALUE &operator[](int index)
    {
        if(index>=size) {
            exit(-1);
        }
        return values[index];
    }
};